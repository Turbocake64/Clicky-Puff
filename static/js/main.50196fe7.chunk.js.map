{"version":3,"sources":["components/CharacterCard/index.js","components/Navbar/index.js","components/Wrapper/index.js","App.js","serviceWorker.js","index.js"],"names":["CharacterCard","props","react_default","a","createElement","className","src","image","alt","name","onClick","handleBtnClick","id","Navbar","href","score","losses","highScore","Wrapper","children","App","state","characters","clicked","guesses","characterId","powerPuff","Object","objectSpread","_this","includes","console","log","push","shuffle","setState","this","arr","j","x","i","length","Math","floor","random","_this2","components_Navbar","components_Wrapper","map","character","components_CharacterCard","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"ilCAiBeA,MAdf,SAAuBC,GACnB,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,iBACXH,EAAAC,EAAAC,cAAA,OACIE,IAAKL,EAAMM,MACXC,IAAKP,EAAMQ,KACXC,QAAW,kBAAMT,EAAMU,eAAeV,EAAMW,gBCMjDC,MAbf,SAAgBZ,GACZ,OACIC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACXH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGU,KAAK,KAAIZ,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,kBAEjBH,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBAAeH,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,kCAC9BH,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,aAAb,UAAiCJ,EAAMc,OAA5C,KACAb,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,WAAiCJ,EAAMe,QAA5C,KACAd,EAAAC,EAAAC,cAAA,WAAKF,EAAAC,EAAAC,cAAA,KAAGC,UAAU,YAAb,eAAqCJ,EAAMgB,WAAhD,aCJGC,MAJf,SAAiBjB,GACf,OAAOC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WAAWJ,EAAMkB,kBC+F1BC,oNAtFbC,MAAQ,CACNC,aACAC,SAAS,EACTR,MAAO,EACPC,OAAQ,EACRC,UAAW,EACXO,QAAS,MAoBXb,eAAiB,SAAAc,GAEf,IAAMC,EAASC,OAAAC,EAAA,EAAAD,CAAA,GAAOE,EAAKR,OAGxBK,EAAUF,QAAQM,SAASL,IAC5BM,QAAQC,IAAI,YACZN,EAAUV,OAASU,EAAUV,OAAQ,EACrCU,EAAUF,QAAU,GACpBE,EAAUX,MAAQ,IAIlBW,EAAUX,MAAQW,EAAUX,MAAO,EACnCW,EAAUF,QAAQS,KAAKR,IAGzBI,EAAKK,QAAQZ,GAGTI,EAAUX,MAAQW,EAAUT,YAC9BS,EAAUT,UAAYS,EAAUX,OAIlCc,EAAKM,SAAST,wFAxCdU,KAAKF,QAAQZ,mCAIPe,GACN,IAAIC,EAAGC,EAAGC,EACV,IAAKA,EAAIH,EAAII,OAAQ,EAAGD,EAAI,EAAGA,IAC7BF,EAAII,KAAKC,MAAMD,KAAKE,UAAYJ,EAAI,IACpCD,EAAIF,EAAIG,GACRH,EAAIG,GAAKH,EAAIC,GACbD,EAAIC,GAAKC,EAEX,OAAOF,mCAiCA,IAAAQ,EAAAT,KACP,OAEElC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAEbH,EAAAC,EAAAC,cAAC0C,EAAD,CACA/B,MAASqB,KAAKf,MAAMN,MACpBC,OAAUoB,KAAKf,MAAML,OACrBC,UAAamB,KAAKf,MAAMJ,YAG1Bf,EAAAC,EAAAC,cAAC2C,EAAD,KAEGX,KAAKf,MAAMC,WAAW0B,IAAI,SAAAC,GAAS,OAClC/C,EAAAC,EAAAC,cAAC8C,EAAD,CAEEvC,eAAgBkC,EAAKlC,eACrBC,GAAIqC,EAAUrC,GACduC,IAAKF,EAAUrC,GACfH,KAAMwC,EAAUxC,KAChBF,MAAO0C,EAAU1C,mBA/EX6C,cCEEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.50196fe7.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./style.css\";\n\nfunction CharacterCard(props) {\n    return (\n        <div className=\"card\">\n            <div className=\"img-container\">\n                <img \n                    src={props.image} \n                    alt={props.name} \n                    onClick= { () => props.handleBtnClick(props.id) }\n                />\n            </div>\n        </div>\n    );\n}\n\nexport default CharacterCard;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Navbar(props) {\n    return (\n        <nav className=\"navbar\">\n            <div><a href=\"/\"><p className=\"partitle\">Clicky Puff!</p></a></div>\n\n            <div className=\"clicktostart\"><p className=\"par par1\">Click Someone to Get Started!</p></div>\n            <div><p className=\" par par2\">Score: {props.score}</p> </div>\n            <div><p className=\"par par3\">Losses: {props.losses}</p> </div>\n            <div><p className=\"par par4\">High Score: {props.highScore}</p> </div>\n        </nav>\n    );\n}\n\nexport default Navbar;","import React from \"react\";\nimport \"./style.css\";\n\nfunction Wrapper(props) {\n  return <div className=\"wrapper\">{props.children}</div>;\n}\n\nexport default Wrapper;","import React, { Component } from 'react';\n// importing components\nimport CharacterCard from \"./components/CharacterCard\";\nimport Navbar from \"./components/Navbar\";\nimport Wrapper from \"./components/Wrapper\";\n// importing the characters array from the json file\nimport characters from \"./characters.json\";\n//importing css stylings\nimport './App.css';\n\nclass App extends Component {\n  // Setting this.state.characters to the character json array\n  // Setting score, losses, and highScore to 0 for the start of each game\n  state = {\n    characters,\n    clicked: false,\n    score: 0,\n    losses: 0,\n    highScore: 0,\n    guesses: []\n  };\n\n  // componentWillMount shuffles the CharacterCards before the DOM is loaded\n  componentWillMount() {\n    this.shuffle(characters);\n  };\n\n  // Here we use the Fisher-Yates alogrithm to randomize the characters array\n  shuffle(arr) {\n    var j, x, i;\n    for (i = arr.length -1; i > 0; i--) {\n      j = Math.floor(Math.random() * (i + 1));\n      x = arr[i];\n      arr[i] = arr[j];\n      arr[j] = x\n    }\n    return arr;\n  };\n\n  handleBtnClick = characterId => {\n    // renaming this.state so we don't have to write it out each time\n    const powerPuff = {...this.state};\n\n    // in this if statement we check to see if the player lost, log their loss, and clear the guesses array & score\n    if(powerPuff.guesses.includes(characterId)) {\n      console.log(\"You lose\");\n      powerPuff.losses = powerPuff.losses +1;\n      powerPuff.guesses = [];\n      powerPuff.score = 0\n    }\n    // if they didn't lose, we increment their score and add the character to the guesses array\n    else\n    { powerPuff.score = powerPuff.score +1;\n      powerPuff.guesses.push(characterId)\n    }\n    // here we shuffle the character cards again\n    this.shuffle(characters);\n\n    // we check the current score against the high score, increasing high score if it is lower than current score.\n    if (powerPuff.score > powerPuff.highScore) {\n      powerPuff.highScore = powerPuff.score\n    }\n\n    // finally we use setState to update the state to the virtual DOM\n    this.setState(powerPuff);\n  }\n\n\n  // renders react elements into the DOM\n  render() {\n    return (\n      // the parent div into which our components will be rendered\n      <div className=\"background\">\n        {/* Setting the score, losses, & highScore in the Navbar */}\n        <Navbar \n        score = {this.state.score}\n        losses = {this.state.losses}\n        highScore = {this.state.highScore}>\n        </Navbar>\n\n      <Wrapper>\n        {/* Map over this.state.characters and render a CharacterCard component for each character object */}\n        {this.state.characters.map(character => (\n          <CharacterCard \n            // each card will inherit an id, a key, a name, and an image from its respective array object\n            handleBtnClick={this.handleBtnClick}\n            id={character.id}\n            key={character.id}\n            name={character.name}\n            image={character.image}\n\n          />\n        ))}\n      </Wrapper>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}